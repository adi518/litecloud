/* scss-lint:disable ElsePlacement */
/* scss-lint:disable Indentation */
/* scss-lint:disable EmptyLineBetweenBlocks */
@function prefix-space($name) {
     @return ' ' + $name;
}
@function to-rem($n) {
     @return to-number((strip-unit($n) / $root-font-size) + rem);
}
@function to-px($n) {
     @return strip-unit($n) + px;
}
@function extend($obj, $ext-obj) {
     @return map-merge($obj, $ext-obj);
}
@function strip-unit($n) {
    @if type-of($n) == 'number' and not unitless($n) {
        @return $n / ($n * 0 + 1);
    }
    @return $n;
}

// ref: http://hugogiraudel.com/2014/01/15/sass-string-to-number/
// ref: http://www.sassmeister.com/gist/9fa19d254864f33d4a80
////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
    @if type-of($value) == 'number' {
        @return $value;
    }

    @else if type-of($value) != 'string' {
        $_: log('Value for `to-number` should be a number or a string.');
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);
        @if not (index(map-keys($numbers), $character) or $character == '.') {
             @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }

        @if $character == '.' {
            $digits: 1;
        }
        @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        }
        @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }
    @return if($minus, -$result, $result);
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
    @if not index(map-keys($units), $unit) {
        $_: log('Invalid unit `#{$unit}`.');
    }
    @return $value * map-get($units, $unit);
}
